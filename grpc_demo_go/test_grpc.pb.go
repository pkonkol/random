// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: test.proto

package main

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TestClient is the client API for Test service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestClient interface {
	Talk(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestReply, error)
	ServerStream(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (Test_ServerStreamClient, error)
	ClientStream(ctx context.Context, opts ...grpc.CallOption) (Test_ClientStreamClient, error)
	DoubleStream(ctx context.Context, opts ...grpc.CallOption) (Test_DoubleStreamClient, error)
}

type testClient struct {
	cc grpc.ClientConnInterface
}

func NewTestClient(cc grpc.ClientConnInterface) TestClient {
	return &testClient{cc}
}

func (c *testClient) Talk(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestReply, error) {
	out := new(TestReply)
	err := c.cc.Invoke(ctx, "/Test/Talk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testClient) ServerStream(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (Test_ServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Test_ServiceDesc.Streams[0], "/Test/ServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &testServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Test_ServerStreamClient interface {
	Recv() (*TestReply, error)
	grpc.ClientStream
}

type testServerStreamClient struct {
	grpc.ClientStream
}

func (x *testServerStreamClient) Recv() (*TestReply, error) {
	m := new(TestReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testClient) ClientStream(ctx context.Context, opts ...grpc.CallOption) (Test_ClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Test_ServiceDesc.Streams[1], "/Test/ClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &testClientStreamClient{stream}
	return x, nil
}

type Test_ClientStreamClient interface {
	Send(*TestRequest) error
	CloseAndRecv() (*TestReply, error)
	grpc.ClientStream
}

type testClientStreamClient struct {
	grpc.ClientStream
}

func (x *testClientStreamClient) Send(m *TestRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testClientStreamClient) CloseAndRecv() (*TestReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(TestReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testClient) DoubleStream(ctx context.Context, opts ...grpc.CallOption) (Test_DoubleStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Test_ServiceDesc.Streams[2], "/Test/DoubleStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &testDoubleStreamClient{stream}
	return x, nil
}

type Test_DoubleStreamClient interface {
	Send(*TestRequest) error
	Recv() (*TestReply, error)
	grpc.ClientStream
}

type testDoubleStreamClient struct {
	grpc.ClientStream
}

func (x *testDoubleStreamClient) Send(m *TestRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testDoubleStreamClient) Recv() (*TestReply, error) {
	m := new(TestReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TestServer is the server API for Test service.
// All implementations must embed UnimplementedTestServer
// for forward compatibility
type TestServer interface {
	Talk(context.Context, *TestRequest) (*TestReply, error)
	ServerStream(*TestRequest, Test_ServerStreamServer) error
	ClientStream(Test_ClientStreamServer) error
	DoubleStream(Test_DoubleStreamServer) error
	mustEmbedUnimplementedTestServer()
}

// UnimplementedTestServer must be embedded to have forward compatible implementations.
type UnimplementedTestServer struct {
}

func (UnimplementedTestServer) Talk(context.Context, *TestRequest) (*TestReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Talk not implemented")
}
func (UnimplementedTestServer) ServerStream(*TestRequest, Test_ServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStream not implemented")
}
func (UnimplementedTestServer) ClientStream(Test_ClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStream not implemented")
}
func (UnimplementedTestServer) DoubleStream(Test_DoubleStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method DoubleStream not implemented")
}
func (UnimplementedTestServer) mustEmbedUnimplementedTestServer() {}

// UnsafeTestServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestServer will
// result in compilation errors.
type UnsafeTestServer interface {
	mustEmbedUnimplementedTestServer()
}

func RegisterTestServer(s grpc.ServiceRegistrar, srv TestServer) {
	s.RegisterService(&Test_ServiceDesc, srv)
}

func _Test_Talk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServer).Talk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Test/Talk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServer).Talk(ctx, req.(*TestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Test_ServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TestRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestServer).ServerStream(m, &testServerStreamServer{stream})
}

type Test_ServerStreamServer interface {
	Send(*TestReply) error
	grpc.ServerStream
}

type testServerStreamServer struct {
	grpc.ServerStream
}

func (x *testServerStreamServer) Send(m *TestReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Test_ClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestServer).ClientStream(&testClientStreamServer{stream})
}

type Test_ClientStreamServer interface {
	SendAndClose(*TestReply) error
	Recv() (*TestRequest, error)
	grpc.ServerStream
}

type testClientStreamServer struct {
	grpc.ServerStream
}

func (x *testClientStreamServer) SendAndClose(m *TestReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testClientStreamServer) Recv() (*TestRequest, error) {
	m := new(TestRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Test_DoubleStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestServer).DoubleStream(&testDoubleStreamServer{stream})
}

type Test_DoubleStreamServer interface {
	Send(*TestReply) error
	Recv() (*TestRequest, error)
	grpc.ServerStream
}

type testDoubleStreamServer struct {
	grpc.ServerStream
}

func (x *testDoubleStreamServer) Send(m *TestReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testDoubleStreamServer) Recv() (*TestRequest, error) {
	m := new(TestRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Test_ServiceDesc is the grpc.ServiceDesc for Test service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Test_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Test",
	HandlerType: (*TestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Talk",
			Handler:    _Test_Talk_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerStream",
			Handler:       _Test_ServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ClientStream",
			Handler:       _Test_ClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DoubleStream",
			Handler:       _Test_DoubleStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "test.proto",
}
